package license_model

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Claims) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "iat":
			z.Iat, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Iat")
				return
			}
		case "iss":
			z.Iss, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Iss")
				return
			}
		case "product":
			z.Product, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Product")
				return
			}
		case "license_key_hash":
			z.LicenseKeyHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LicenseKeyHash")
				return
			}
		case "license_max_version":
			z.LicenseMaxVersion, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LicenseMaxVersion")
				return
			}
		case "licensee_name":
			z.LicenseeName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LicenseeName")
				return
			}
		case "licensee_email":
			z.LicenseeEmail, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LicenseeEmail")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Claims) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "iat"
	err = en.Append(0x87, 0xa3, 0x69, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Iat)
	if err != nil {
		err = msgp.WrapError(err, "Iat")
		return
	}
	// write "iss"
	err = en.Append(0xa3, 0x69, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Iss)
	if err != nil {
		err = msgp.WrapError(err, "Iss")
		return
	}
	// write "product"
	err = en.Append(0xa7, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Product)
	if err != nil {
		err = msgp.WrapError(err, "Product")
		return
	}
	// write "license_key_hash"
	err = en.Append(0xb0, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.LicenseKeyHash)
	if err != nil {
		err = msgp.WrapError(err, "LicenseKeyHash")
		return
	}
	// write "license_max_version"
	err = en.Append(0xb3, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LicenseMaxVersion)
	if err != nil {
		err = msgp.WrapError(err, "LicenseMaxVersion")
		return
	}
	// write "licensee_name"
	err = en.Append(0xad, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LicenseeName)
	if err != nil {
		err = msgp.WrapError(err, "LicenseeName")
		return
	}
	// write "licensee_email"
	err = en.Append(0xae, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.LicenseeEmail)
	if err != nil {
		err = msgp.WrapError(err, "LicenseeEmail")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Claims) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "iat"
	o = append(o, 0x87, 0xa3, 0x69, 0x61, 0x74)
	o = msgp.AppendInt64(o, z.Iat)
	// string "iss"
	o = append(o, 0xa3, 0x69, 0x73, 0x73)
	o = msgp.AppendString(o, z.Iss)
	// string "product"
	o = append(o, 0xa7, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74)
	o = msgp.AppendString(o, z.Product)
	// string "license_key_hash"
	o = append(o, 0xb0, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.LicenseKeyHash)
	// string "license_max_version"
	o = append(o, 0xb3, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt(o, z.LicenseMaxVersion)
	// string "licensee_name"
	o = append(o, 0xad, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.LicenseeName)
	// string "licensee_email"
	o = append(o, 0xae, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.LicenseeEmail)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Claims) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "iat":
			z.Iat, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Iat")
				return
			}
		case "iss":
			z.Iss, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Iss")
				return
			}
		case "product":
			z.Product, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Product")
				return
			}
		case "license_key_hash":
			z.LicenseKeyHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LicenseKeyHash")
				return
			}
		case "license_max_version":
			z.LicenseMaxVersion, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LicenseMaxVersion")
				return
			}
		case "licensee_name":
			z.LicenseeName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LicenseeName")
				return
			}
		case "licensee_email":
			z.LicenseeEmail, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LicenseeEmail")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Claims) Msgsize() (s int) {
	s = 1 + 4 + msgp.Int64Size + 4 + msgp.StringPrefixSize + len(z.Iss) + 8 + msgp.StringPrefixSize + len(z.Product) + 17 + msgp.StringPrefixSize + len(z.LicenseKeyHash) + 20 + msgp.IntSize + 14 + msgp.StringPrefixSize + len(z.LicenseeName) + 15 + msgp.StringPrefixSize + len(z.LicenseeEmail)
	return
}
